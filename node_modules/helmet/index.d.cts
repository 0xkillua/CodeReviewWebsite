// index.js
require("dotenv").config();

const express = require("express");
const passport = require("passport");
const session = require("express-session");
const GitHubStrategy = require("passport-github2").Strategy;
const path = require("path");
const flash = require('express-flash');
const csrf = require('csurf');
const helmet = require('helmet');

// Validate environment variables
if (!process.env.GITHUB_CLIENT_ID || !process.env.GITHUB_CLIENT_SECRET) {
  console.error("🚨 Missing required environment variables:");
  console.error("Ensure GITHUB_CLIENT_ID and GITHUB_CLIENT_SECRET are defined in .env");
  process.exit(1);
}

const app = express();

// Security Headers
app.use(helmet.contentSecurityPolicy({
  directives: {
    defaultSrc: "'self'",
    scriptSrc: "'self' 'unsafe-inline'",
    styleSrc: "'self' 'unsafe-inline'",
    imgSrc: "'self' data:",
    connectSrc: "'self'"
  }
}));

// View engine setup
app.set("view engine", "ejs");
app.use(express.static(path.join(__dirname, "public")));

// Session middleware
app.use(session({
  secret: process.env.SESSION_SECRET || "fallback-secret-key-for-dev",
  resave: false,
  saveUninitialized: true,
  cookie: {
    secure: process.env.NODE_ENV === "production",
    maxAge: 1000 * 60 * 60 * 24 * 7, // 7 days
    httpOnly: true,
    sameSite: 'lax'
  }
}));

// Flash messages
app.use(flash());
app.use((req, res, next) => {
  res.locals.messages = req.flash(); // Make flash messages available in EJS
  next();
});

// CSRF Protection
const csrfProtection = csrf({ cookie: true });
app.use(csrfProtection);

// Expose CSRF token to EJS templates
app.use((req, res, next) => {
  res.locals.csrfToken = req.csrfToken();
  next();
});

// Passport initialization
app.use(passport.initialize());
app.use(passport.session());

// GitHub OAuth Strategy
passport.use(new GitHubStrategy(
  {
    clientID: process.env.GITHUB_CLIENT_ID,
    clientSecret: process.env.GITHUB_CLIENT_SECRET,
    callbackURL: process.env.CALLBACK_URL || "http://localhost:3000/auth/github/callback",
    scope: ["user:email"]
  },
  (accessToken, refreshToken, profile, done) => {
    return done(null, profile);
  }
));

passport.serializeUser((user, done) => {
  done(null, user);
});
passport.deserializeUser((user, done) => {
  done(null, user);
});

// Routes
app.get("/", (req, res) => {
  res.render("home");
});

app.get("/login", (req, res) => {
  res.render("login");
});

app.get("/auth/github", (req, res, next) => {
  const authUrl = passport._strategies.github._oauth2.getAuthorizeUrl({
    scope: ["user:email"],
    prompt: "login"
  });
  res.redirect(authUrl);
});

app.get("/auth/github/callback",
  passport.authenticate("github", {
    failureRedirect: "/login",
    failureFlash: true
  }),
  (req, res) => {
    res.redirect("/profile");
  }
);

app.get("/profile", ensureAuthenticated, (req, res) => {
  res.render("profile", { user: req.user });
});

app.get("/logout", (req, res, next) => {
  req.logout(function (err) {
    if (err) return next(err);
    req.session.destroy(function (err) {
      if (err) return next(err);
      res.redirect("/");
    });
  });
});

// Utility function
function ensureAuthenticated(req, res, next) {
  if (req.isAuthenticated()) return next();
  req.flash("error", "Please log in to view this page");
  res.redirect("/login");
}

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`✅ Server running on http://localhost:${PORT}`);
  console.log("🔐 Environment check passed. All required variables are set.");
});